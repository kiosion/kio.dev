#!/bin/bash

set -e
ARGS=$(getopt -o e:p: -l env:,project_id:,dataset:,sanity_token:,api_token:,port: -- "$@")
eval set -- "$ARGS"

while [[ $1 != -- ]]; do
  case $1 in
    -e|--env) ENV=$2; shift 2;;
    -p|--port) PORT=$2; shift 2;;
    --project_id) SANITY_PROJECT_ID=$2; shift 2;;
    --dataset) SANITY_DATASET=$2; shift 2;;
    --sanity_token) SANITY_TOKEN=$2; shift 2;;
    --api_token) API_TOKEN=$2; shift 2;;
    *) echo "Invalid option: $1"; exit 1;;
  esac
done

if [ -z "$ENV" ]; then
  echo "ERROR: Missing 'ENV' argument for release"
  exit 1
fi
if [ -z "$PORT" ]; then
  echo "ERROR: Missing 'PORT' argument for release"
  exit 1
fi
REQ_ARGS=(SANITY_PROJECT_ID SANITY_DATASET SANITY_TOKEN API_TOKEN)
for arg in "${REQ_ARGS[@]}"; do
  if [ -z "${!arg}" ]; then
    echo "ERROR: Missing '$arg' argument for release"
    exit 1
  fi
done

printf "Starting release build for $ENV...\r"
cd /app

mix local.hex --if-missing --force
mix local.rebar --if-missing --force
mix deps.get --only ${ENV}

for arg in "${REQ_ARGS[@]}"; do
  sed -i "s/{{$arg}}/${!arg}/g" ./config/${ENV}.env.exs
done

MIX_ENV=${ENV} mix release --overwrite

printf "Release built successfully!\r"
exit 0
