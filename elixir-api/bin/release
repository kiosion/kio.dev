#!/bin/bash
set -e
MIX_ENV="prod"
while getopts ":p:d:t:a:x:" opt; do
  case $opt in
    p) SANITY_PROJECT_ID="$OPTARG"
    ;;
    d) SANITY_DATASET="$OPTARG"
    ;;
    t) SANITY_TOKEN="$OPTARG"
    ;;
    a) API_TOKEN="$OPTARG"
    ;;
    x) PORT="$OPTARG"
    ;;
    \?) echo "Invalid option -$OPTARG" >&2
    ;;
  esac
done
if [ -z "$SANITY_PROJECT_ID" ] || [ -z "$SANITY_DATASET" ] || [ -z "$SANITY_TOKEN" ] || [ -z "$API_TOKEN" ] || [ -z "$PORT" ]; then
  echo "ERROR: Missing arguments for release"
  exit 1
fi
printf "Starting release build for $SANITY_DATASET...\r"
cd /app
sed -i "s/\${SANITY_PROJECT_ID}/\"$SANITY_PROJECT_ID\"/g" ./config/prod.env.exs && sed -i "s/\${SANITY_TOKEN}/\"$SANITY_TOKEN\"/g" ./config/prod.env.exs && sed -i "s/\${SANITY_DATASET}/\"$SANITY_DATASET\"/g" ./config/prod.env.exs && sed -i "s/\${API_TOKEN}/\"$API_TOKEN\"/g" ./config/prod.env.exs && sed -i "s/\${PORT}/$PORT/g" ./config/prod.env.exs
printf "Fetching project deps...\r"
mix local.rebar --if-missing --force > /dev/null && mix local.hex --if-missing --force > /dev/null && mix deps.get --only prod > /dev/null && mix do clean, compile --force
printf "Building release for $SANITY_DATASET...\r"
export MIX_ENV=prod
mix release prod --overwrite
printf "Release built successfully!\r"
exit 0
