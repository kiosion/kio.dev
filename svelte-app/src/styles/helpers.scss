@use 'sass:math';

@function ease-in-out($t) {
  @if ($t < 0.5) {
    @return 2 * $t * $t;
  } @else {
    @return -1 + (4 - 2 * $t) * $t;
  }
}

@function ease-gradient($dir, $color1, $color2) {
  $stops: 20; // Number of stops for a smoother gradient
  $percentage-step: math.div(100%, ($stops - 1));
  $gradient: '';

  @for $i from 0 through ($stops - 1) {
    $percentage: $i * $percentage-step;
    $eased-percentage: ease-in-out(math.div($percentage, 100%));
    $interpolated-color: mix($color2, $color1, $eased-percentage * 100%);
    @if $i == 0 {
      $gradient: '#{$interpolated-color} #{$percentage}';
    } @else {
      $gradient: '#{$gradient}, #{$interpolated-color} #{$percentage}';
    }
  }

  $gradient-string: unquote('linear-gradient(#{$dir}, #{$gradient})');
  @return $gradient-string;
}

@function ease-gradient-lab($dir, $color1, $color2) {
  $stops: 20; // Number of stops for a smoother gradient
  $percentage-step: 100% / ($stops - 1);
  $gradient: '';

  @for $i from 0 through ($stops - 1) {
    $percentage: $i * $percentage-step;
    $eased-percentage: ease-in-out($percentage / 100);
    $interpolated-color: interpolate-lab($color1, $color2, $eased-percentage);
    @if $i == 0 {
      $gradient: '#{$interpolated-color} #{$percentage}';
    } @else {
      $gradient: '#{$gradient}, #{$interpolated-color} #{$percentage}';
    }
  }

  $gradient-string: unquote('linear-gradient(#{$dir}, #{$gradient})');
  @return $gradient-string;
}

@function rgb-to-lab($color) {
  $r: red($color) / 255;
  $g: green($color) / 255;
  $b: blue($color) / 255;

  // RGB to XYZ
  @if $r > 0.04045 {
    $r: pow((($r + 0.055) / 1.055), 2.4);
  } @else {
    $r: $r / 12.92;
  }

  @if $g > 0.04045 {
    $g: pow((($g + 0.055) / 1.055), 2.4);
  } @else {
    $g: $g / 12.92;
  }

  @if $b > 0.04045 {
    $b: pow((($b + 0.055) / 1.055), 2.4);
  } @else {
    $b: $b / 12.92;
  }

  $x: ($r * 0.4124564 + $g * 0.3575761 + $b * 0.1804375) / 0.95047;
  $y: ($r * 0.2126729 + $g * 0.7151522 + $b * 0.072175) / 1;
  $z: ($r * 0.0193339 + $g * 0.119192 + $b * 0.9503041) / 1.08883;

  // XYZ to LAB
  @if $x > 0.008856 {
    $x: pow($x, 1/3);
  } @else {
    $x: (7.787 * $x) + (16 / 116);
  }

  @if $y > 0.008856 {
    $y: pow($y, 1/3);
  } @else {
    $y: (7.787 * $y) + (16 / 116);
  }

  @if $z > 0.008856 {
    $z: pow($z, 1/3);
  } @else {
    $z: (7.787 * $z) + (16 / 116);
  }

  $l: (116 * $y) - 16;
  $a: 500 * ($x - $y);
  $b: 200 * ($y - $z);

  @return ($l, $a, $b);
}

@function lab-to-rgb($lab) {
  $l: nth($lab, 1);
  $a: nth($lab, 2);
  $b: nth($lab, 3);

  $y: ($l + 16) / 116;
  $x: $a / 500 + $y;
  $z: $y - $b / 200;

  @if pow($y / 1%, 3) > 0.008856 {
    $y: pow($y / 1%, 3);
  } @else {
    $y: ($y / 1% - 16 / 116) / 7.787;
  }

  @if pow($x / 1%, 3) > 0.008856 {
    $x: pow($x / 1%, 3);
  } @else {
    $x: ($x / 1% - 16 / 116) / 7.787;
  }

  @if pow($z / 1%, 3) > 0.008856 {
    $z: pow($z / 1%, 3);
  } @else {
    $z: ($z / 1% - 16 / 116) / 7.787;
  }

  $x: $x * 0.95047;
  $y: $y * 1;
  $z: $z * 1.08883;

  $r: $x * 3.2404542 + $y * -1.5371385 + $z * -0.4985314;
  $g: $x * -0.969266 + $y * 1.8760108 + $z * 0.041556;
  $b: $x * 0.0556434 + $y * -0.2040259 + $z * 1.0572252;

  @if $r > 0.0031308 {
    $r: 1.055 * pow($r, (1 / 2.4)) - 0.055;
  } @else {
    $r: 12.92 * $r;
  }

  @if $g > 0.0031308 {
    $g: 1.055 * pow($g, (1 / 2.4)) - 0.055;
  } @else {
    $g: 12.92 * $g;
  }

  @if $b > 0.0031308 {
    $b: 1.055 * pow($b, (1 / 2.4)) - 0.055;
  } @else {
    $b: 12.92 * $b;
  }

  @return rgb($r * 255, $g * 255, $b * 255);
}

@function interpolate-lab($start-color, $end-color, $position) {
  $start-lab: rgb-to-lab($start-color);
  $end-lab: rgb-to-lab($end-color);

  $position: $position / 1%;

  $l: nth($start-lab, 1) + (nth($end-lab, 1) - nth($start-lab, 1)) * $position;
  $a: nth($start-lab, 2) + (nth($end-lab, 2) - nth($start-lab, 2)) * $position;
  $b: nth($start-lab, 3) + (nth($end-lab, 3) - nth($start-lab, 3)) * $position;

  @return lab-to-rgb(($l, $a, $b));
}
