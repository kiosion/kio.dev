/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: 'sanity.imagePaletteSwatch';
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: 'sanity.imagePalette';
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: 'sanity.imageDimensions';
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: 'sanity.fileAsset';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: 'geopoint';
  lat?: number;
  lng?: number;
  alt?: number;
};

export type SiteSettings = {
  _id: string;
  _type: 'siteSettings';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  image?: {
    dark?: {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: 'image';
    };
    light?: {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: 'image';
    };
  };
  handle?: string;
  bio?: string;
  enableToru?: boolean;
  socialLinks?: Array<{
    name?: string;
    url?: string;
    internal?: boolean;
    rel?: Array<'nofollow' | 'noopener' | 'noreferrer' | 'me'>;
    _key: string;
  }>;
  about?: Array<{
    title?: string;
    content?: Array<
      | {
          children?: Array<{
            marks?: Array<string>;
            text?: string;
            _type: 'span';
            _key: string;
          }>;
          style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote';
          listItem?: 'bullet' | 'number';
          markDefs?: Array<
            | {
                href?: string;
                newtab?: boolean;
                external?: boolean;
                _type: 'link';
                _key: string;
              }
            | {
                note?: Array<{
                  children?: Array<{
                    marks?: Array<string>;
                    text?: string;
                    _type: 'span';
                    _key: string;
                  }>;
                  style?: 'normal';
                  listItem?: 'bullet' | 'number';
                  markDefs?: Array<{
                    href?: string;
                    newtab?: boolean;
                    external?: boolean;
                    _type: 'link';
                    _key: string;
                  }>;
                  level?: number;
                  _type: 'block';
                  _key: string;
                }>;
                _type: 'footnote';
                _key: string;
              }
          >;
          level?: number;
          _type: 'block';
          _key: string;
        }
      | {
          asset?: {
            _ref: string;
            _type: 'reference';
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
          };
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          _type: 'image';
          _key: string;
        }
      | ({
          _key: string;
        } & Code)
      | ({
          _key: string;
        } & Divider)
      | ({
          _key: string;
        } & Header)
    >;
    _key: string;
  }>;
  meta?: Array<{
    title?: string;
    content?: Array<
      | {
          children?: Array<{
            marks?: Array<string>;
            text?: string;
            _type: 'span';
            _key: string;
          }>;
          style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote';
          listItem?: 'bullet' | 'number';
          markDefs?: Array<
            | {
                href?: string;
                newtab?: boolean;
                external?: boolean;
                _type: 'link';
                _key: string;
              }
            | {
                note?: Array<{
                  children?: Array<{
                    marks?: Array<string>;
                    text?: string;
                    _type: 'span';
                    _key: string;
                  }>;
                  style?: 'normal';
                  listItem?: 'bullet' | 'number';
                  markDefs?: Array<{
                    href?: string;
                    newtab?: boolean;
                    external?: boolean;
                    _type: 'link';
                    _key: string;
                  }>;
                  level?: number;
                  _type: 'block';
                  _key: string;
                }>;
                _type: 'footnote';
                _key: string;
              }
          >;
          level?: number;
          _type: 'block';
          _key: string;
        }
      | {
          asset?: {
            _ref: string;
            _type: 'reference';
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
          };
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          _type: 'image';
          _key: string;
        }
      | ({
          _key: string;
        } & Code)
      | ({
          _key: string;
        } & Divider)
      | ({
          _key: string;
        } & Header)
    >;
    _key: string;
  }>;
  timeline?: Array<{
    title?: string;
    subtitle?: string;
    range?: {
      start?: string;
      end?: string;
    };
    body?: Array<
      | {
          children?: Array<{
            marks?: Array<string>;
            text?: string;
            _type: 'span';
            _key: string;
          }>;
          style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote';
          listItem?: 'bullet' | 'number';
          markDefs?: Array<
            | {
                href?: string;
                newtab?: boolean;
                external?: boolean;
                _type: 'link';
                _key: string;
              }
            | {
                note?: Array<{
                  children?: Array<{
                    marks?: Array<string>;
                    text?: string;
                    _type: 'span';
                    _key: string;
                  }>;
                  style?: 'normal';
                  listItem?: 'bullet' | 'number';
                  markDefs?: Array<{
                    href?: string;
                    newtab?: boolean;
                    external?: boolean;
                    _type: 'link';
                    _key: string;
                  }>;
                  level?: number;
                  _type: 'block';
                  _key: string;
                }>;
                _type: 'footnote';
                _key: string;
              }
          >;
          level?: number;
          _type: 'block';
          _key: string;
        }
      | {
          asset?: {
            _ref: string;
            _type: 'reference';
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
          };
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          _type: 'image';
          _key: string;
        }
      | ({
          _key: string;
        } & Code)
      | ({
          _key: string;
        } & Divider)
      | ({
          _key: string;
        } & Header)
    >;
    _key: string;
  }>;
  pgpKey?: string;
};

export type Tag = {
  _id: string;
  _type: 'tag';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  slug: Slug;
  desc?: string;
};

export type Project = {
  _id: string;
  _type: 'project';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  desc?: string;
  date?: string;
  views?: number;
  body?: Array<
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: 'span';
          _key: string;
        }>;
        style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote';
        listItem?: 'bullet' | 'number';
        markDefs?: Array<
          | {
              href?: string;
              newtab?: boolean;
              external?: boolean;
              _type: 'link';
              _key: string;
            }
          | {
              note?: Array<{
                children?: Array<{
                  marks?: Array<string>;
                  text?: string;
                  _type: 'span';
                  _key: string;
                }>;
                style?: 'normal';
                listItem?: 'bullet' | 'number';
                markDefs?: Array<{
                  href?: string;
                  newtab?: boolean;
                  external?: boolean;
                  _type: 'link';
                  _key: string;
                }>;
                level?: number;
                _type: 'block';
                _key: string;
              }>;
              _type: 'footnote';
              _key: string;
            }
        >;
        level?: number;
        _type: 'block';
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: 'image';
        _key: string;
      }
    | ({
        _key: string;
      } & Code)
    | ({
        _key: string;
      } & Divider)
    | ({
        _key: string;
      } & Header)
  >;
  tags?: Array<{
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: 'tag';
  }>;
  images?: Array<{
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
    _key: string;
  }>;
  github?: string;
  links?: Array<{
    title?: string;
    url?: string;
    _key: string;
  }>;
};

export type Post = {
  _id: string;
  _type: 'post';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  desc?: string;
  date?: string;
  views?: number;
  body?: Array<
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: 'span';
          _key: string;
        }>;
        style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote';
        listItem?: 'bullet' | 'number';
        markDefs?: Array<
          | {
              href?: string;
              newtab?: boolean;
              external?: boolean;
              _type: 'link';
              _key: string;
            }
          | {
              note?: Array<{
                children?: Array<{
                  marks?: Array<string>;
                  text?: string;
                  _type: 'span';
                  _key: string;
                }>;
                style?: 'normal';
                listItem?: 'bullet' | 'number';
                markDefs?: Array<{
                  href?: string;
                  newtab?: boolean;
                  external?: boolean;
                  _type: 'link';
                  _key: string;
                }>;
                level?: number;
                _type: 'block';
                _key: string;
              }>;
              _type: 'footnote';
              _key: string;
            }
        >;
        level?: number;
        _type: 'block';
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: 'image';
        _key: string;
      }
    | ({
        _key: string;
      } & Code)
    | ({
        _key: string;
      } & Divider)
    | ({
        _key: string;
      } & Header)
  >;
  tags?: Array<{
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: 'tag';
  }>;
};

export type SanityImageCrop = {
  _type: 'sanity.imageCrop';
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: 'sanity.imageHotspot';
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: 'sanity.imageAsset';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: 'sanity.assetSourceData';
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: 'sanity.imageMetadata';
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Slug = {
  _type: 'slug';
  current?: string;
  source?: string;
};

export type Header = {
  _type: 'header';
  icon?: string;
  title?: string;
};

export type Divider = {
  _type: 'divider';
  style?: 'break' | 'readMore' | 'divider';
};

export type Code = {
  _type: 'code';
  language?: string;
  filename?: string;
  code?: string;
  highlightedLines?: Array<number>;
};

export type AllSanitySchemaTypes =
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityFileAsset
  | Geopoint
  | SiteSettings
  | Tag
  | Project
  | Post
  | SanityImageCrop
  | SanityImageHotspot
  | SanityImageAsset
  | SanityAssetSourceData
  | SanityImageMetadata
  | Slug
  | Header
  | Divider
  | Code;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ../svelte-app/src/lib/sanity.queries.server.ts
// Variable: GetConfigQuery
// Query: *[_type == 'siteSettings'][0]
export type GetConfigQueryResult = {
  _id: string;
  _type: 'siteSettings';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  image?: {
    dark?: {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: 'image';
    };
    light?: {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: 'image';
    };
  };
  handle?: string;
  bio?: string;
  enableToru?: boolean;
  socialLinks?: Array<{
    name?: string;
    url?: string;
    internal?: boolean;
    rel?: Array<'me' | 'nofollow' | 'noopener' | 'noreferrer'>;
    _key: string;
  }>;
  about?: Array<{
    title?: string;
    content?: Array<
      | ({
          _key: string;
        } & Code)
      | ({
          _key: string;
        } & Divider)
      | ({
          _key: string;
        } & Header)
      | {
          children?: Array<{
            marks?: Array<string>;
            text?: string;
            _type: 'span';
            _key: string;
          }>;
          style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal';
          listItem?: 'bullet' | 'number';
          markDefs?: Array<
            | {
                note?: Array<{
                  children?: Array<{
                    marks?: Array<string>;
                    text?: string;
                    _type: 'span';
                    _key: string;
                  }>;
                  style?: 'normal';
                  listItem?: 'bullet' | 'number';
                  markDefs?: Array<{
                    href?: string;
                    newtab?: boolean;
                    external?: boolean;
                    _type: 'link';
                    _key: string;
                  }>;
                  level?: number;
                  _type: 'block';
                  _key: string;
                }>;
                _type: 'footnote';
                _key: string;
              }
            | {
                href?: string;
                newtab?: boolean;
                external?: boolean;
                _type: 'link';
                _key: string;
              }
          >;
          level?: number;
          _type: 'block';
          _key: string;
        }
      | {
          asset?: {
            _ref: string;
            _type: 'reference';
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
          };
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          _type: 'image';
          _key: string;
        }
    >;
    _key: string;
  }>;
  meta?: Array<{
    title?: string;
    content?: Array<
      | ({
          _key: string;
        } & Code)
      | ({
          _key: string;
        } & Divider)
      | ({
          _key: string;
        } & Header)
      | {
          children?: Array<{
            marks?: Array<string>;
            text?: string;
            _type: 'span';
            _key: string;
          }>;
          style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal';
          listItem?: 'bullet' | 'number';
          markDefs?: Array<
            | {
                note?: Array<{
                  children?: Array<{
                    marks?: Array<string>;
                    text?: string;
                    _type: 'span';
                    _key: string;
                  }>;
                  style?: 'normal';
                  listItem?: 'bullet' | 'number';
                  markDefs?: Array<{
                    href?: string;
                    newtab?: boolean;
                    external?: boolean;
                    _type: 'link';
                    _key: string;
                  }>;
                  level?: number;
                  _type: 'block';
                  _key: string;
                }>;
                _type: 'footnote';
                _key: string;
              }
            | {
                href?: string;
                newtab?: boolean;
                external?: boolean;
                _type: 'link';
                _key: string;
              }
          >;
          level?: number;
          _type: 'block';
          _key: string;
        }
      | {
          asset?: {
            _ref: string;
            _type: 'reference';
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
          };
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          _type: 'image';
          _key: string;
        }
    >;
    _key: string;
  }>;
  timeline?: Array<{
    title?: string;
    subtitle?: string;
    range?: {
      start?: string;
      end?: string;
    };
    body?: Array<
      | ({
          _key: string;
        } & Code)
      | ({
          _key: string;
        } & Divider)
      | ({
          _key: string;
        } & Header)
      | {
          children?: Array<{
            marks?: Array<string>;
            text?: string;
            _type: 'span';
            _key: string;
          }>;
          style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal';
          listItem?: 'bullet' | 'number';
          markDefs?: Array<
            | {
                note?: Array<{
                  children?: Array<{
                    marks?: Array<string>;
                    text?: string;
                    _type: 'span';
                    _key: string;
                  }>;
                  style?: 'normal';
                  listItem?: 'bullet' | 'number';
                  markDefs?: Array<{
                    href?: string;
                    newtab?: boolean;
                    external?: boolean;
                    _type: 'link';
                    _key: string;
                  }>;
                  level?: number;
                  _type: 'block';
                  _key: string;
                }>;
                _type: 'footnote';
                _key: string;
              }
            | {
                href?: string;
                newtab?: boolean;
                external?: boolean;
                _type: 'link';
                _key: string;
              }
          >;
          level?: number;
          _type: 'block';
          _key: string;
        }
      | {
          asset?: {
            _ref: string;
            _type: 'reference';
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
          };
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          _type: 'image';
          _key: string;
        }
    >;
    _key: string;
  }>;
  pgpKey?: string;
} | null;
// Variable: GetPostQuery
// Query: *[_type == 'post' && (_id == '$id' || slug.current == '$slug')]{  _id,  'objectID': _id,  _rev,  _type,  _createdAt,  title,  publishedAt,  tags[]->{    _id,    title,    slug  },  slug,  body,  desc,  'date': select(    defined(date) => date + 'T00:00:00Z',    true => _createdAt  ),  'views': coalesce(views, 0),  'numberOfCharacters': length(pt::text(body)),  'estimatedWordCount': round(length(pt::text(body)) / 5),  'estimatedReadingTime': round(length(pt::text(body)) / 5 / 120)}[0]
export type GetPostQueryResult = {
  _id: string;
  objectID: string;
  _rev: string;
  _type: 'post';
  _createdAt: string;
  title: string | null;
  publishedAt: null;
  tags: Array<{
    _id: string;
    title: string;
    slug: Slug;
  }> | null;
  slug: Slug;
  body: Array<
    | ({
        _key: string;
      } & Code)
    | ({
        _key: string;
      } & Divider)
    | ({
        _key: string;
      } & Header)
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: 'span';
          _key: string;
        }>;
        style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal';
        listItem?: 'bullet' | 'number';
        markDefs?: Array<
          | {
              note?: Array<{
                children?: Array<{
                  marks?: Array<string>;
                  text?: string;
                  _type: 'span';
                  _key: string;
                }>;
                style?: 'normal';
                listItem?: 'bullet' | 'number';
                markDefs?: Array<{
                  href?: string;
                  newtab?: boolean;
                  external?: boolean;
                  _type: 'link';
                  _key: string;
                }>;
                level?: number;
                _type: 'block';
                _key: string;
              }>;
              _type: 'footnote';
              _key: string;
            }
          | {
              href?: string;
              newtab?: boolean;
              external?: boolean;
              _type: 'link';
              _key: string;
            }
        >;
        level?: number;
        _type: 'block';
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: 'image';
        _key: string;
      }
  > | null;
  desc: string | null;
  date: string | null;
  views: number | 0;
  numberOfCharacters: number;
  estimatedWordCount: number;
  estimatedReadingTime: number;
} | null;
// Variable: GetPostsQuery
// Query: *[_type == 'post']{  _id,  'objectID': _id,  _rev,  _type,  _createdAt,  title,  publishedAt,  tags[]->{    _id,    title,    slug  },  slug,  body,  desc,  'date': dateTime(select(    defined(date) => date + 'T00:00:00Z',    true => _createdAt  )),  'views': coalesce(views, 0),  'numberOfCharacters': length(pt::text(body)),  'estimatedWordCount': round(length(pt::text(body)) / 5),  'estimatedReadingTime': round(length(pt::text(body)) / 5 / 120)} | order(date desc) [$startNumber...$endNumber]
export type GetPostsQueryResult = Array<{
  _id: string;
  objectID: string;
  _rev: string;
  _type: 'post';
  _createdAt: string;
  title: string | null;
  publishedAt: null;
  tags: Array<{
    _id: string;
    title: string;
    slug: Slug;
  }> | null;
  slug: Slug;
  body: Array<
    | ({
        _key: string;
      } & Code)
    | ({
        _key: string;
      } & Divider)
    | ({
        _key: string;
      } & Header)
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: 'span';
          _key: string;
        }>;
        style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal';
        listItem?: 'bullet' | 'number';
        markDefs?: Array<
          | {
              note?: Array<{
                children?: Array<{
                  marks?: Array<string>;
                  text?: string;
                  _type: 'span';
                  _key: string;
                }>;
                style?: 'normal';
                listItem?: 'bullet' | 'number';
                markDefs?: Array<{
                  href?: string;
                  newtab?: boolean;
                  external?: boolean;
                  _type: 'link';
                  _key: string;
                }>;
                level?: number;
                _type: 'block';
                _key: string;
              }>;
              _type: 'footnote';
              _key: string;
            }
          | {
              href?: string;
              newtab?: boolean;
              external?: boolean;
              _type: 'link';
              _key: string;
            }
        >;
        level?: number;
        _type: 'block';
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: 'image';
        _key: string;
      }
  > | null;
  desc: string | null;
  date: string | null;
  views: number | 0;
  numberOfCharacters: number;
  estimatedWordCount: number;
  estimatedReadingTime: number;
}>;
// Variable: CountPostsQuery
// Query: count(*[_type == 'post'])
export type CountPostsQueryResult = number;

// Query TypeMap
import '@sanity/client';
declare module '@sanity/client' {
  interface SanityQueries {
    "*[_type == 'siteSettings'][0]": GetConfigQueryResult;
    "*[_type == 'post' && slug.current == $slug]{\n  _id,\n  'objectID': _id,\n  _rev,\n  _type,\n  _createdAt,\n  title,\n  publishedAt,\n  tags[]->{\n    _id,\n    title,\n    slug\n  },\n  slug,\n  body,\n  desc,\n  'date': select(\n    defined(date) => date + 'T00:00:00Z',\n    true => _createdAt\n  ),\n  'views': coalesce(views, 0),\n  'numberOfCharacters': length(pt::text(body)),\n  'estimatedWordCount': round(length(pt::text(body)) / 5),\n  'estimatedReadingTime': round(length(pt::text(body)) / 5 / 120)\n}[0]": GetPostQueryResult;
    "*[_type == 'post']{\n  _id,\n  'objectID': _id,\n  _rev,\n  _type,\n  _createdAt,\n  title,\n  publishedAt,\n  tags[]->{\n    _id,\n    title,\n    slug\n  },\n  slug,\n  body,\n  desc,\n  'date': dateTime(select(\n    defined(date) => date + 'T00:00:00Z',\n    true => _createdAt\n  )),\n  'views': coalesce(views, 0),\n  'numberOfCharacters': length(pt::text(body)),\n  'estimatedWordCount': round(length(pt::text(body)) / 5),\n  'estimatedReadingTime': round(length(pt::text(body)) / 5 / 120)\n} | order(date desc) [$startNumber...$endNumber]": GetPostsQueryResult;
    "count(*[_type == 'post'])": CountPostsQueryResult;
  }
}
